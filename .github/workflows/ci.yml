name: CI Pipeline

on:
  push:
    branches:
      - main
      - dev
      - 'release/**'
      - 'hotfix/**'
  pull_request:
    branches:
      - main
      - dev

defaults:
  run:
    shell: bash

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false
  JAVA_VERSION: 21
  # Gradle commands
  GRADLE_BUILD_CMD: ./gradlew build --no-daemon -x test
  GRADLE_TEST_CMD: ./gradlew test --no-daemon
  GRADLE_INTEGRATION_TEST_CMD: ./gradlew integrationTest --no-daemon
  GRADLE_CHECKSTYLE_CMD: ./gradlew checkstyleMain checkstyleTest
  GRADLE_DEPSCAN_CMD: ./gradlew dependencyCheckAnalyze

jobs:
  # =================================================================
  # Job: Code Quality & Linting
  # =================================================================
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'gradle'

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Run Checkstyle
        run: ${{ env.GRADLE_CHECKSTYLE_CMD }}

      - name: Upload checkstyle results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: checkstyle-results
          path: '**/build/reports/checkstyle/'

  # =================================================================
  # Job: Security Scan
  # =================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'gradle'

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Run dependency vulnerability scan
        run: ${{ env.GRADLE_DEPSCAN_CMD }}
        continue-on-error: true

      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: '**/build/reports/dependency-check-report.html'

  # =================================================================
  # Job: Build & Unit Tests
  # =================================================================
  test:
    name: Test Suite (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: [code-quality]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'gradle'

      - name: Run unit tests
        run: ${{ env.GRADLE_TEST_CMD }} --continue

      - name: Run integration tests
        run: ${{ env.GRADLE_INTEGRATION_TEST_CMD }} --continue
        continue-on-error: true

      - name: Generate test report summary
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Test Results (${{ matrix.os }})
          path: '**/build/test-results/**/*.xml'
          reporter: java-junit

      - name: Upload test results artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}
          path: |
            **/build/test-results/
            **/build/reports/tests/

  # =================================================================
  # Job: Build Artifacts
  # =================================================================
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'gradle'

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Build with Gradle (skipping tests)
        run: ${{ env.GRADLE_BUILD_CMD }}

      - name: Generate Javadoc
        run: ./gradlew javadoc

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            **/build/libs/*.jar
            **/build/docs/javadoc/
          retention-days: 30